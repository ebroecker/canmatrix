name: Tests

on:
  release:
    types: [ published ]
  pull_request:
  push:

env:
  PY_COLORS: "1"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }} # See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontinue-on-error
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # os: [ubuntu-latest]
        experimental: [false]
        # python-version: ["2.7","3.4","3.5","3.6","3.7","3.8","3.9","3.10","3.11","3.12"]
        python-version: ["3.7","3.8","3.9","3.10","3.11","3.12"]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Test with pytest via tox
      run: |
        tox -e gh
    - name: Coveralls
      uses: coverallsapp/github-action@v2.3.0
      with:
        github-token: ${{ secrets.github_token }}
        flag-name: Test_${{ matrix.os }}_${{ matrix.python-version }}
        parallel: true
        path-to-lcov: ./coverage.lcov

  coveralls:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2.3.0
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true

  # static-code-analysis:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.10"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -e .[lint]
  #   - name: ruff
  #     run: |
  #       ruff check can
  #   - name: pylint
  #     run: |
  #       pylint \
  #       src/**.py \
  #       can/io \
  #       doc/conf.py \
  #       examples/**.py \

  # format:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.10"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -e .[lint]
  #   - name: Code Format Check with Black
  #     run: |
  #       black --check --verbose .

  # docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.10"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -e .[canalystii,gs_usb,mf4]
  #       pip install -r doc/doc-requirements.txt
  #   - name: Build documentation
  #     run: |
  #       python -m sphinx -Wan --keep-going doc build
  #   - name: Run doctest
  #     run: |
  #       python -m sphinx -b doctest -W --keep-going doc build
  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: sphinx-out
  #       path: ./build/
  #       retention-days: 5

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheel and sdist
        run: pipx run build
      - name: Check build artifacts
        run: pipx run twine check --strict dist/*
      - name: Save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-can-dist
          path: ./dist

  upload_pypi:
    needs: [build]
    runs-on: ubuntu-latest

    # upload to PyPI only on release
    if: github.event.release && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4.1.7
        with:
          name: python-can-dist
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
