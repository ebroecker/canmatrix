# Stubs for xlwt.antlr (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

SKIP: int
INVALID_TYPE: int
EOF_TYPE: int
EOF: int
NULL_TREE_LOOKAHEAD: int
MIN_USER_TYPE: int
EOF_CHAR: str

def version(): ...
def error(fmt: Any, *args: Any) -> None: ...
def ifelse(cond: Any, _then: Any, _else: Any): ...
def is_string_type(x: Any): ...
def assert_string_type(x: Any) -> None: ...

class ANTLRException(Exception):
    def __init__(self, *args: Any) -> None: ...

class RecognitionException(ANTLRException):
    fileName: Any = ...
    line: int = ...
    column: int = ...
    def __init__(self, *args: Any) -> None: ...

class NoViableAltException(RecognitionException):
    token: Any = ...
    node: Any = ...
    def __init__(self, *args: Any) -> None: ...

class NoViableAltForCharException(RecognitionException):
    foundChar: Any = ...
    def __init__(self, *args: Any) -> None: ...

class SemanticException(RecognitionException):
    def __init__(self, *args: Any) -> None: ...

class MismatchedCharException(RecognitionException):
    NONE: int = ...
    CHAR: int = ...
    NOT_CHAR: int = ...
    RANGE: int = ...
    NOT_RANGE: int = ...
    SET: int = ...
    NOT_SET: int = ...
    args: Any = ...
    mismatchType: Any = ...
    foundChar: Any = ...
    expecting: Any = ...
    upper: Any = ...
    scanner: Any = ...
    set: Any = ...
    def __init__(self, *args: Any) -> None: ...
    def appendCharName(self, sb: Any, c: Any) -> None: ...

class MismatchedTokenException(RecognitionException):
    NONE: int = ...
    TOKEN: int = ...
    NOT_TOKEN: int = ...
    RANGE: int = ...
    NOT_RANGE: int = ...
    SET: int = ...
    NOT_SET: int = ...
    args: Any = ...
    tokenNames: Any = ...
    token: Any = ...
    tokenText: str = ...
    node: Any = ...
    mismatchType: Any = ...
    expecting: Any = ...
    upper: Any = ...
    fileName: Any = ...
    set: Any = ...
    def __init__(self, *args: Any) -> None: ...
    def appendTokenName(self, sb: Any, tokenType: Any) -> None: ...

class TokenStreamException(ANTLRException):
    def __init__(self, *args: Any) -> None: ...

class TokenStreamIOException(TokenStreamException):
    io: Any = ...
    def __init__(self, *args: Any) -> None: ...

class TokenStreamRecognitionException(TokenStreamException):
    recog: Any = ...
    def __init__(self, *args: Any) -> None: ...

class TokenStreamRetryException(TokenStreamException):
    def __init__(self, *args: Any) -> None: ...

class CharStreamException(ANTLRException):
    def __init__(self, *args: Any) -> None: ...

class CharStreamIOException(CharStreamException):
    io: Any = ...
    def __init__(self, *args: Any) -> None: ...

class TryAgain(Exception): ...

class Token:
    SKIP: int = ...
    INVALID_TYPE: int = ...
    EOF_TYPE: int = ...
    EOF: int = ...
    NULL_TREE_LOOKAHEAD: int = ...
    MIN_USER_TYPE: int = ...
    type: Any = ...
    text: Any = ...
    def __init__(self, **argv: Any) -> None: ...
    def isEOF(self): ...
    def getColumn(self): ...
    def getLine(self): ...
    def getFilename(self) -> None: ...
    def setFilename(self, name: Any): ...
    def getText(self): ...
    def setText(self, text: Any): ...
    def setColumn(self, column: Any): ...
    def setLine(self, line: Any): ...
    def getType(self): ...
    def setType(self, type: Any): ...
    def toString(self): ...

class CommonToken(Token):
    line: int = ...
    col: int = ...
    def __init__(self, **argv: Any) -> None: ...
    def getLine(self): ...
    def getText(self): ...
    def getColumn(self): ...
    def setLine(self, line: Any): ...
    text: Any = ...
    def setText(self, text: Any): ...
    def setColumn(self, col: Any): ...
    def toString(self): ...

class CommonHiddenStreamToken(CommonToken):
    hiddenBefore: Any = ...
    hiddenAfter: Any = ...
    def __init__(self, *args: Any) -> None: ...
    def getHiddenAfter(self): ...
    def getHiddenBefore(self): ...
    def setHiddenAfter(self, t: Any) -> None: ...
    def setHiddenBefore(self, t: Any) -> None: ...

class Queue:
    buffer: Any = ...
    def __init__(self) -> None: ...
    def append(self, item: Any) -> None: ...
    def elementAt(self, index: Any): ...
    def reset(self) -> None: ...
    def removeFirst(self) -> None: ...
    def length(self): ...

class InputBuffer:
    nMarkers: int = ...
    markerOffset: int = ...
    numToConsume: int = ...
    queue: Any = ...
    def __init__(self) -> None: ...
    def commit(self) -> None: ...
    def consume(self) -> None: ...
    def getLAChars(self): ...
    def getMarkedChars(self): ...
    def isMarked(self): ...
    def fill(self, k: Any) -> None: ...
    def LA(self, k: Any): ...
    def mark(self): ...
    def rewind(self, mark: Any) -> None: ...
    def reset(self) -> None: ...
    def syncConsume(self) -> None: ...

class CharBuffer(InputBuffer):
    input: Any = ...
    def __init__(self, reader: Any) -> None: ...
    def fill(self, amount: Any) -> None: ...

class LexerSharedInputState:
    input: Any = ...
    column: int = ...
    line: int = ...
    tokenStartColumn: int = ...
    tokenStartLine: int = ...
    guessing: int = ...
    filename: Any = ...
    def __init__(self, ibuf: Any) -> None: ...
    def reset(self) -> None: ...
    def LA(self, k: Any): ...

class TokenStream:
    def nextToken(self) -> None: ...
    def __iter__(self): ...

class TokenStreamIterator:
    inst: Any = ...
    def __init__(self, inst: Any) -> None: ...
    def next(self): ...

class TokenStreamSelector(TokenStream):
    def __init__(self) -> None: ...
    def addInputStream(self, stream: Any, key: Any) -> None: ...
    def getCurrentStream(self): ...
    def getStream(self, sname: Any): ...
    def nextToken(self): ...
    def pop(self): ...
    def push(self, arg: Any) -> None: ...
    def retry(self) -> None: ...
    def select(self, arg: Any) -> None: ...

class TokenStreamBasicFilter(TokenStream):
    input: Any = ...
    discardMask: Any = ...
    def __init__(self, input: Any) -> None: ...
    discardMark: Any = ...
    def discard(self, arg: Any) -> None: ...
    def nextToken(self): ...

class TokenStreamHiddenTokenFilter(TokenStreamBasicFilter):
    hideMask: Any = ...
    nextMonitoredToken: Any = ...
    lastHiddenToken: Any = ...
    firstHidden: Any = ...
    def __init__(self, input: Any) -> None: ...
    def consume(self) -> None: ...
    def consumeFirst(self) -> None: ...
    def getDiscardMask(self): ...
    def getHiddenAfter(self, t: Any): ...
    def getHiddenBefore(self, t: Any): ...
    def getHideMask(self): ...
    def getInitialHiddenToken(self): ...
    def hide(self, m: Any) -> None: ...
    def LA(self, i: Any): ...
    def nextToken(self): ...

class StringBuffer:
    text: Any = ...
    def __init__(self, string: Optional[Any] = ...) -> None: ...
    def setLength(self, sz: Any) -> None: ...
    def length(self): ...
    def append(self, c: Any) -> None: ...
    def getString(self, a: Optional[Any] = ..., length: Optional[Any] = ...): ...
    toString: Any = ...

class Reader:
    cin: Any = ...
    buf: Any = ...
    def __init__(self, stream: Any) -> None: ...
    def read(self, num: Any): ...

class CharScanner(TokenStream):
    NO_CHAR: int = ...
    EOF_CHAR: str = ...
    saveConsumedInput: bool = ...
    tokenClass: Any = ...
    caseSensitive: bool = ...
    caseSensitiveLiterals: bool = ...
    literals: Any = ...
    tabsize: int = ...
    commitToPath: bool = ...
    traceDepth: int = ...
    text: Any = ...
    hashString: Any = ...
    def __init__(self, *argv: Any, **kwargs: Any) -> None: ...
    def __iter__(self): ...
    inputState: Any = ...
    def setInput(self, *argv: Any) -> None: ...
    def setTabSize(self, size: Any) -> None: ...
    def getTabSize(self): ...
    def setCaseSensitive(self, t: Any) -> None: ...
    def setCommitToPath(self, commit: Any) -> None: ...
    def setFilename(self, f: Any) -> None: ...
    def setLine(self, line: Any) -> None: ...
    def setText(self, s: Any) -> None: ...
    def getCaseSensitive(self): ...
    def getCaseSensitiveLiterals(self): ...
    def getColumn(self): ...
    def setColumn(self, c: Any) -> None: ...
    def getCommitToPath(self): ...
    def getFilename(self): ...
    def getInputBuffer(self): ...
    def getInputState(self): ...
    def setInputState(self, state: Any) -> None: ...
    def getLine(self): ...
    def getText(self): ...
    def getTokenObject(self): ...
    def LA(self, i: Any): ...
    def makeToken(self, type: Any): ...
    def mark(self): ...
    def match(self, item: Any): ...
    def matchNot(self, c: Any) -> None: ...
    def matchRange(self, c1: Any, c2: Any) -> None: ...
    def newline(self) -> None: ...
    def tab(self) -> None: ...
    def panic(self, s: str = ...) -> None: ...
    def reportError(self, s: Any) -> None: ...
    def reportWarning(self, s: Any) -> None: ...
    def resetText(self) -> None: ...
    def rewind(self, pos: Any) -> None: ...
    def setTokenObjectClass(self, cl: Any) -> None: ...
    def testForLiteral(self, token: Any): ...
    def testLiteralsTable(self, *args: Any): ...
    def toLower(self, c: Any): ...
    def traceIndent(self) -> None: ...
    def traceIn(self, rname: Any) -> None: ...
    def traceOut(self, rname: Any) -> None: ...
    def uponEOF(self) -> None: ...
    def append(self, c: Any) -> None: ...
    def commit(self) -> None: ...
    def consume(self) -> None: ...
    def consumeUntil_char(self, c: Any) -> None: ...
    def consumeUntil_bitset(self, bitset: Any) -> None: ...
    def default(self, la1: Any) -> None: ...
    def filterdefault(self, la1: Any, *args: Any) -> None: ...
    def raise_NoViableAlt(self, la1: Optional[Any] = ...) -> None: ...
    def set_return_token(self, _create: Any, _token: Any, _ttype: Any, _offset: Any): ...

class CharScannerIterator:
    inst: Any = ...
    def __init__(self, inst: Any) -> None: ...
    def next(self): ...

class BitSet:
    BITS: int = ...
    NIBBLE: int = ...
    LOG_BITS: int = ...
    MOD_MASK: Any = ...
    data: Any = ...
    def __init__(self, data: Optional[Any] = ...) -> None: ...
    def member(self, item: Any): ...
    def wordNumber(self, bit: Any): ...
    def bitMask(self, bit: Any): ...
    def set(self, bit: Any, on: bool = ...) -> None: ...
    add: Any = ...
    def off(self, bit: Any, off: bool = ...) -> None: ...
    def at(self, bit: Any): ...

def illegalarg_ex(func: Any) -> None: ...
def runtime_ex(func: Any) -> None: ...

class TokenBuffer:
    input: Any = ...
    nMarkers: int = ...
    markerOffset: int = ...
    numToConsume: int = ...
    queue: Any = ...
    def __init__(self, stream: Any) -> None: ...
    def reset(self) -> None: ...
    def consume(self) -> None: ...
    def fill(self, amount: Any) -> None: ...
    def getInput(self): ...
    def LA(self, k: Any): ...
    def LT(self, k: Any): ...
    def mark(self): ...
    def rewind(self, mark: Any) -> None: ...
    def syncConsume(self) -> None: ...

class ParserSharedInputState:
    input: Any = ...
    def __init__(self) -> None: ...
    guessing: int = ...
    filename: Any = ...
    def reset(self) -> None: ...

class Parser:
    tokenNames: Any = ...
    returnAST: Any = ...
    astFactory: Any = ...
    tokenTypeToASTClassMap: Any = ...
    ignoreInvalidDebugCalls: bool = ...
    traceDepth: int = ...
    inputState: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getTokenTypeToASTClassMap(self): ...
    def addMessageListener(self, l: Any) -> None: ...
    def addParserListener(self, l: Any) -> None: ...
    def addParserMatchListener(self, l: Any) -> None: ...
    def addParserTokenListener(self, l: Any) -> None: ...
    def addSemanticPredicateListener(self, l: Any) -> None: ...
    def addSyntacticPredicateListener(self, l: Any) -> None: ...
    def addTraceListener(self, l: Any) -> None: ...
    def consume(self) -> None: ...
    def consumeUntil(self, arg: Any) -> None: ...
    def defaultDebuggingSetup(self) -> None: ...
    def getAST(self): ...
    def getASTFactory(self): ...
    def getFilename(self): ...
    def getInputState(self): ...
    def setInputState(self, state: Any) -> None: ...
    def getTokenName(self, num: Any): ...
    def getTokenNames(self): ...
    def isDebugMode(self): ...
    def LA(self, i: Any) -> None: ...
    def LT(self, i: Any) -> None: ...
    def mark(self): ...
    def match(self, set: Any) -> None: ...
    def matchNot(self, t: Any) -> None: ...
    def removeMessageListener(self, l: Any) -> None: ...
    def removeParserListener(self, l: Any) -> None: ...
    def removeParserMatchListener(self, l: Any) -> None: ...
    def removeParserTokenListener(self, l: Any) -> None: ...
    def removeSemanticPredicateListener(self, l: Any) -> None: ...
    def removeSyntacticPredicateListener(self, l: Any) -> None: ...
    def removeTraceListener(self, l: Any) -> None: ...
    def reportError(self, x: Any) -> None: ...
    def reportWarning(self, s: Any) -> None: ...
    def rewind(self, pos: Any) -> None: ...
    def setASTFactory(self, f: Any) -> None: ...
    def setASTNodeClass(self, cl: Any) -> None: ...
    def setASTNodeType(self, nodeType: Any) -> None: ...
    def setDebugMode(self, debugMode: Any) -> None: ...
    def setFilename(self, f: Any) -> None: ...
    def setIgnoreInvalidDebugCalls(self, value: Any) -> None: ...
    def setTokenBuffer(self, t: Any) -> None: ...
    def traceIndent(self) -> None: ...
    def traceIn(self, rname: Any) -> None: ...
    def traceOut(self, rname: Any) -> None: ...
    def addASTChild(self, currentAST: Any, child: Any) -> None: ...
    def makeASTRoot(self, currentAST: Any, root: Any) -> None: ...

class LLkParser(Parser):
    k: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def consume(self) -> None: ...
    def LA(self, i: Any): ...
    def LT(self, i: Any): ...
    def set_k(self, index: Any, *args: Any) -> None: ...
    def trace(self, ee: Any, rname: Any) -> None: ...
    def traceIn(self, rname: Any) -> None: ...
    def traceOut(self, rname: Any) -> None: ...

class TreeParserSharedInputState:
    guessing: int = ...
    def __init__(self) -> None: ...

class TreeParser:
    inputState: Any = ...
    tokenNames: Any = ...
    returnAST: Any = ...
    astFactory: Any = ...
    traceDepth: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getAST(self): ...
    def getASTFactory(self): ...
    def getTokenName(self, num: Any): ...
    def getTokenNames(self): ...
    def match(self, t: Any, set: Any) -> None: ...
    def matchNot(self, t: Any, ttype: Any) -> None: ...
    def reportError(self, ex: Any) -> None: ...
    def reportWarning(self, s: Any) -> None: ...
    def setASTFactory(self, f: Any) -> None: ...
    def setASTNodeType(self, nodeType: Any) -> None: ...
    def setASTNodeClass(self, nodeType: Any) -> None: ...
    def traceIndent(self) -> None: ...
    def traceIn(self, rname: Any, t: Any) -> None: ...
    def traceOut(self, rname: Any, t: Any) -> None: ...
    def addASTChild(self, currentAST: Any, child: Any) -> None: ...
    def makeASTRoot(self, currentAST: Any, root: Any) -> None: ...

def rightmost(ast: Any): ...
def cmptree(s: Any, t: Any, partial: Any): ...

class AST:
    def __init__(self) -> None: ...
    def addChild(self, c: Any) -> None: ...
    def equals(self, t: Any): ...
    def equalsList(self, t: Any): ...
    def equalsListPartial(self, t: Any): ...
    def equalsTree(self, t: Any): ...
    def equalsTreePartial(self, t: Any): ...
    def findAll(self, tree: Any) -> None: ...
    def findAllPartial(self, subtree: Any) -> None: ...
    def getFirstChild(self): ...
    def getNextSibling(self): ...
    def getText(self): ...
    def getType(self): ...
    def getLine(self): ...
    def getColumn(self): ...
    def getNumberOfChildren(self): ...
    def initialize(self, t: Any) -> None: ...
    def setFirstChild(self, c: Any) -> None: ...
    def setNextSibling(self, n: Any) -> None: ...
    def setText(self, text: Any) -> None: ...
    def setType(self, ttype: Any) -> None: ...
    def toString(self) -> None: ...
    def toStringList(self): ...
    def toStringTree(self): ...

class ASTNULLType(AST):
    def __init__(self) -> None: ...
    def getText(self): ...
    def getType(self): ...

class BaseAST(AST):
    verboseStringConversion: bool = ...
    tokenNames: Any = ...
    down: Any = ...
    right: Any = ...
    def __init__(self) -> None: ...
    def addChild(self, node: Any) -> None: ...
    def getNumberOfChildren(self): ...
    def doWorkForFindAll(self, v: Any, target: Any, partialMatch: Any) -> None: ...
    def equals(self, t: Any): ...
    def equalsList(self, t: Any): ...
    def equalsListPartial(self, t: Any): ...
    def equalsTree(self, t: Any): ...
    def equalsTreePartial(self, t: Any): ...
    def findAll(self, target: Any): ...
    def findAllPartial(self, sub: Any): ...
    def getFirstChild(self): ...
    def getNextSibling(self): ...
    def getText(self): ...
    def getType(self): ...
    def getLine(self): ...
    def getColumn(self): ...
    def removeChildren(self) -> None: ...
    def setFirstChild(self, c: Any) -> None: ...
    def setNextSibling(self, n: Any) -> None: ...
    def setText(self, text: Any) -> None: ...
    def setType(self, ttype: Any) -> None: ...
    def setVerboseStringConversion(verbose: Any, names: Any) -> None: ...
    def getTokenNames(self): ...
    def toString(self): ...
    def toStringList(self): ...
    def toStringTree(self): ...

class CommonAST(BaseAST):
    ttype: Any = ...
    text: str = ...
    line: int = ...
    column: int = ...
    def __init__(self, token: Optional[Any] = ...) -> None: ...
    def getText(self): ...
    def getType(self): ...
    def getLine(self): ...
    def getColumn(self): ...
    def initialize(self, *args: Any) -> None: ...
    def setText(self, text_: Any) -> None: ...
    def setType(self, ttype_: Any) -> None: ...

class CommonASTWithHiddenTokens(CommonAST):
    hiddenBefore: Any = ...
    hiddenAfter: Any = ...
    def __init__(self, *args: Any) -> None: ...
    def getHiddenAfter(self): ...
    def getHiddenBefore(self): ...
    def initialize(self, *args: Any) -> None: ...

class ASTPair:
    root: Any = ...
    child: Any = ...
    def __init__(self) -> None: ...
    def advanceChildToEnd(self) -> None: ...
    def copy(self): ...
    def toString(self): ...

class ASTFactory:
    def __init__(self, table: Optional[Any] = ...) -> None: ...
    def create(self, *args: Any): ...
    def setASTNodeClass(self, className: Optional[Any] = ...) -> None: ...
    setASTNodeType: Any = ...
    def getASTNodeClass(self): ...
    def getTokenTypeToASTClassMap(self): ...
    def setTokenTypeToASTClassMap(self, amap: Any) -> None: ...
    def error(self, e: Any) -> None: ...
    def setTokenTypeASTNodeType(self, tokenType: Any, className: Any) -> None: ...
    def getASTNodeType(self, tokenType: Any): ...
    def dup(self, t: Any): ...
    def dupList(self, t: Any): ...
    def dupTree(self, t: Any): ...
    maptype: Any = ...

class ASTVisitor:
    def __init__(self, *args: Any) -> None: ...
    def visit(self, ast: Any) -> None: ...

ASTNULL: Any

def make(*nodes: Any): ...
def dup(t: Any, factory: Any): ...
def dupList(t: Any, factory: Any): ...
def dupTree(t: Any, factory: Any): ...
