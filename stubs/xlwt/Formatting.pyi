# Stubs for xlwt.Formatting (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

class Font:
    ESCAPEMENT_NONE: int = ...
    ESCAPEMENT_SUPERSCRIPT: int = ...
    ESCAPEMENT_SUBSCRIPT: int = ...
    UNDERLINE_NONE: int = ...
    UNDERLINE_SINGLE: int = ...
    UNDERLINE_SINGLE_ACC: int = ...
    UNDERLINE_DOUBLE: int = ...
    UNDERLINE_DOUBLE_ACC: int = ...
    FAMILY_NONE: int = ...
    FAMILY_ROMAN: int = ...
    FAMILY_SWISS: int = ...
    FAMILY_MODERN: int = ...
    FAMILY_SCRIPT: int = ...
    FAMILY_DECORATIVE: int = ...
    CHARSET_ANSI_LATIN: int = ...
    CHARSET_SYS_DEFAULT: int = ...
    CHARSET_SYMBOL: int = ...
    CHARSET_APPLE_ROMAN: int = ...
    CHARSET_ANSI_JAP_SHIFT_JIS: int = ...
    CHARSET_ANSI_KOR_HANGUL: int = ...
    CHARSET_ANSI_KOR_JOHAB: int = ...
    CHARSET_ANSI_CHINESE_GBK: int = ...
    CHARSET_ANSI_CHINESE_BIG5: int = ...
    CHARSET_ANSI_GREEK: int = ...
    CHARSET_ANSI_TURKISH: int = ...
    CHARSET_ANSI_VIETNAMESE: int = ...
    CHARSET_ANSI_HEBREW: int = ...
    CHARSET_ANSI_ARABIC: int = ...
    CHARSET_ANSI_BALTIC: int = ...
    CHARSET_ANSI_CYRILLIC: int = ...
    CHARSET_ANSI_THAI: int = ...
    CHARSET_ANSI_LATIN_II: int = ...
    CHARSET_OEM_LATIN_I: int = ...
    height: int = ...
    italic: bool = ...
    struck_out: bool = ...
    outline: bool = ...
    shadow: bool = ...
    colour_index: int = ...
    bold: bool = ...
    escapement: Any = ...
    underline: Any = ...
    family: Any = ...
    charset: Any = ...
    name: str = ...
    def __init__(self) -> None: ...
    def get_biff_record(self): ...

class Alignment:
    HORZ_GENERAL: int = ...
    HORZ_LEFT: int = ...
    HORZ_CENTER: int = ...
    HORZ_RIGHT: int = ...
    HORZ_FILLED: int = ...
    HORZ_JUSTIFIED: int = ...
    HORZ_CENTER_ACROSS_SEL: int = ...
    HORZ_DISTRIBUTED: int = ...
    VERT_TOP: int = ...
    VERT_CENTER: int = ...
    VERT_BOTTOM: int = ...
    VERT_JUSTIFIED: int = ...
    VERT_DISTRIBUTED: int = ...
    DIRECTION_GENERAL: int = ...
    DIRECTION_LR: int = ...
    DIRECTION_RL: int = ...
    ORIENTATION_NOT_ROTATED: int = ...
    ORIENTATION_STACKED: int = ...
    ORIENTATION_90_CC: int = ...
    ORIENTATION_90_CW: int = ...
    ROTATION_0_ANGLE: int = ...
    ROTATION_STACKED: int = ...
    WRAP_AT_RIGHT: int = ...
    NOT_WRAP_AT_RIGHT: int = ...
    SHRINK_TO_FIT: int = ...
    NOT_SHRINK_TO_FIT: int = ...
    horz: Any = ...
    vert: Any = ...
    dire: Any = ...
    orie: Any = ...
    rota: Any = ...
    wrap: Any = ...
    shri: Any = ...
    inde: int = ...
    merg: int = ...
    def __init__(self) -> None: ...

class Borders:
    NO_LINE: int = ...
    THIN: int = ...
    MEDIUM: int = ...
    DASHED: int = ...
    DOTTED: int = ...
    THICK: int = ...
    DOUBLE: int = ...
    HAIR: int = ...
    MEDIUM_DASHED: int = ...
    THIN_DASH_DOTTED: int = ...
    MEDIUM_DASH_DOTTED: int = ...
    THIN_DASH_DOT_DOTTED: int = ...
    MEDIUM_DASH_DOT_DOTTED: int = ...
    SLANTED_MEDIUM_DASH_DOTTED: int = ...
    NEED_DIAG1: int = ...
    NEED_DIAG2: int = ...
    NO_NEED_DIAG1: int = ...
    NO_NEED_DIAG2: int = ...
    left: Any = ...
    right: Any = ...
    top: Any = ...
    bottom: Any = ...
    diag: Any = ...
    left_colour: int = ...
    right_colour: int = ...
    top_colour: int = ...
    bottom_colour: int = ...
    diag_colour: int = ...
    need_diag1: Any = ...
    need_diag2: Any = ...
    def __init__(self) -> None: ...

class Pattern:
    NO_PATTERN: int = ...
    SOLID_PATTERN: int = ...
    pattern: Any = ...
    pattern_fore_colour: int = ...
    pattern_back_colour: int = ...
    def __init__(self) -> None: ...

class Protection:
    cell_locked: int = ...
    formula_hidden: int = ...
    def __init__(self) -> None: ...
